// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/pacs00800110.proto

package pacs008

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _pacs_00800110_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DebitInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DebitInfo) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetAccount()); l < 1 || l > 35 {
		return DebitInfoValidationError{
			field:  "Account",
			reason: "value length must be between 1 and 35 bytes, inclusive",
		}
	}

	if l := len(m.GetFinInstId()); l < 1 || l > 35 {
		return DebitInfoValidationError{
			field:  "FinInstId",
			reason: "value length must be between 1 and 35 bytes, inclusive",
		}
	}

	if l := len(m.GetName()); l < 1 || l > 35 {
		return DebitInfoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 35 bytes, inclusive",
		}
	}

	if m.GetAmount() < 0 {
		return DebitInfoValidationError{
			field:  "Amount",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for Tags

	return nil
}

// DebitInfoValidationError is the validation error returned by
// DebitInfo.Validate if the designated constraints aren't met.
type DebitInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitInfoValidationError) ErrorName() string { return "DebitInfoValidationError" }

// Error satisfies the builtin error interface
func (e DebitInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitInfoValidationError{}

// Validate checks the field values on CreditInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreditInfo) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetAccount()); l < 1 || l > 35 {
		return CreditInfoValidationError{
			field:  "Account",
			reason: "value length must be between 1 and 35 bytes, inclusive",
		}
	}

	if l := len(m.GetFinInstId()); l < 1 || l > 35 {
		return CreditInfoValidationError{
			field:  "FinInstId",
			reason: "value length must be between 1 and 35 bytes, inclusive",
		}
	}

	if l := len(m.GetName()); l < 1 || l > 35 {
		return CreditInfoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 35 bytes, inclusive",
		}
	}

	if m.GetAmount() < 0 {
		return CreditInfoValidationError{
			field:  "Amount",
			reason: "value must be greater than or equal to 0",
		}
	}

	// no validation rules for Tags

	return nil
}

// CreditInfoValidationError is the validation error returned by
// CreditInfo.Validate if the designated constraints aren't met.
type CreditInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditInfoValidationError) ErrorName() string { return "CreditInfoValidationError" }

// Error satisfies the builtin error interface
func (e CreditInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditInfoValidationError{}

// Validate checks the field values on MxPacs00800110 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MxPacs00800110) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetEndToEndId()); err != nil {
		return MxPacs00800110ValidationError{
			field:  "EndToEndId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if l := len(m.GetInitiatingPartyId()); l < 1 || l > 35 {
		return MxPacs00800110ValidationError{
			field:  "InitiatingPartyId",
			reason: "value length must be between 1 and 35 bytes, inclusive",
		}
	}

	// no validation rules for RequiredExecutionDate

	if m.GetDebitInfo() == nil {
		return MxPacs00800110ValidationError{
			field:  "DebitInfo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDebitInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MxPacs00800110ValidationError{
				field:  "DebitInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetCreditInfo()) < 1 {
		return MxPacs00800110ValidationError{
			field:  "CreditInfo",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetCreditInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MxPacs00800110ValidationError{
					field:  fmt.Sprintf("CreditInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

func (m *MxPacs00800110) _validateUuid(uuid string) error {
	if matched := _pacs_00800110_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MxPacs00800110ValidationError is the validation error returned by
// MxPacs00800110.Validate if the designated constraints aren't met.
type MxPacs00800110ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MxPacs00800110ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MxPacs00800110ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MxPacs00800110ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MxPacs00800110ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MxPacs00800110ValidationError) ErrorName() string { return "MxPacs00800110ValidationError" }

// Error satisfies the builtin error interface
func (e MxPacs00800110ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMxPacs00800110.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MxPacs00800110ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MxPacs00800110ValidationError{}

// Validate checks the field values on FI2FICustomerCreditTransferInitiationRq
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *FI2FICustomerCreditTransferInitiationRq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetHeader() == nil {
		return FI2FICustomerCreditTransferInitiationRqValidationError{
			field:  "Header",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FI2FICustomerCreditTransferInitiationRqValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPayload() == nil {
		return FI2FICustomerCreditTransferInitiationRqValidationError{
			field:  "Payload",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FI2FICustomerCreditTransferInitiationRqValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FI2FICustomerCreditTransferInitiationRqValidationError is the validation
// error returned by FI2FICustomerCreditTransferInitiationRq.Validate if the
// designated constraints aren't met.
type FI2FICustomerCreditTransferInitiationRqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FI2FICustomerCreditTransferInitiationRqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FI2FICustomerCreditTransferInitiationRqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FI2FICustomerCreditTransferInitiationRqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FI2FICustomerCreditTransferInitiationRqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FI2FICustomerCreditTransferInitiationRqValidationError) ErrorName() string {
	return "FI2FICustomerCreditTransferInitiationRqValidationError"
}

// Error satisfies the builtin error interface
func (e FI2FICustomerCreditTransferInitiationRqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFI2FICustomerCreditTransferInitiationRq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FI2FICustomerCreditTransferInitiationRqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FI2FICustomerCreditTransferInitiationRqValidationError{}
